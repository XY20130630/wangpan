#include <bits/stdc++.h>

typedef long long LL;

#define FOR(i, a, b) for (int i = (a), i##_END_ = (b); i <= i##_END_; i++)
#define DNF(i, a, b) for (int i = (a), i##_END_ = (b); i >= i##_END_; i--)

template <typename Tp> void in(Tp &x) {
	char ch = getchar(), f = 1; x = 0;
	while (ch != '-' && (ch < '0' || ch > '9')) ch = getchar();
	if (ch == '-') f = -1, ch = getchar();
	while (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar();
	x *= f;
}

template <typename Tp> bool chkmax(Tp &x, Tp y) {return x > y ? 0 : (x=y,1);}
template <typename Tp> bool chkmin(Tp &x, Tp y) {return x < y ? 0 : (x=y,1);}
template <typename Tp> Tp Max(Tp x, Tp y) {return x > y ? x : y;}
template <typename Tp> Tp Min(Tp x, Tp y) {return x < y ? x : y;}

namespace Geometry {
	const double eps = 1e-8, Pi = acos(-1);

	struct Point {
		double x, y;
		Point(double x = 0, double y = 0) : x(x), y(y) {}
	};

	typedef Point Vector;

	Vector operator - (Vector a, Vector b) {return Vector(a.x - b.x, a.y - b.y);}
	Vector operator + (Vector a, Vector b) {return Vector(a.x + b.x, a.y + b.y);}
	Vector operator * (Vector a, double p) {return Vector(a.x * p, a.y * p);}
	Vector operator / (Vector a, double p) {return Vector(a.x / p, a.y / p);}

	int cmp(double x, double y)	{
		if (fabs(x - y) <= eps) return 0;
		return x - y < 0 ? -1 : 1;
	}
	
	bool operator == (const &Point x, const &Point y) {
		return !cmp(x.x, y.x) && !cmp(y.x, y.y);
	}
	
	bool operator < (const &Point x, const &Point y) {
		return cmp(x.x, y.x) < 0 || !cmp(x.x, y.x) && cmp(x.y, y.y) < 0;
	}

	double dot(Vector a, Vector b) {
		return a.x * b.x + a.y * b.y;
	}

	double lenth(Vector a) {
		return sqrt(a.x * a.x + a.y * a.y);
	}

	double angle(Vector a, Vector b) {
		return acos(dot(a, b) / lenth(a) / lenth(b));
	}

	double cross(Vector a, Vector b) {
		return a.x * b.y - a.y * b.x;
	}

	double area2(Vector a, Vector b, Vector c) {
		return cross(b - a, c - a);
	}

	Vector rotate(Vector a, double rad) {
		return Vector(a.x * cos(rad) - a.y * sin(rad),
									a.x * sin(rad) + a.y * cos(rad));
	}

	Point inter(Point b1, Vector k1, Point b2, Vector k2) {
		Vector u = b1 - b2;
		double t = cross(k2, u) / cross(k1, k2);
		return b1 + t * k1;
	}

	double dis(Point p, Point a, Point b) {
		Vector t = b - a, t1 = p - a;
		return fabs(cross(t, t1)) / lenth(b - a);
	}

	double polygonarea(Point *p, int n) {
		double area = 0;
		FOR(i, 2, n + 1)
			area += cross(p[(i - 1) % n + 1], p[i - 1]);
		return fabs(area) / 2;
	}
}

int main() {
	return 0;
}
